"""
Author: Andrew Buchanan
Date: 26/04/2025

Purpose:
This script processes the CSV files created from the invoices and attendance records,
creates a text-based vectorstore using a HuggingFace embedding model, and saves the
resulting database using Chroma for fast retrieval. It prepares the data for later
Q&A interaction with the LLM, including fine-grained temporal details.
"""

import os
import pandas as pd
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter

# --- Configuration ---
persist_directory = "chroma_db"
invoice_csv_path = "invoice_summary.csv"
attendance_csv_path = "attendance_detail.csv"
embedding_model_name = "BAAI/bge-small-en"

# --- Validate files exist ---
if not os.path.exists(invoice_csv_path):
    raise FileNotFoundError(f"‚ùå Couldn't find {invoice_csv_path}. Please run invoice creation first.")
if not os.path.exists(attendance_csv_path):
    raise FileNotFoundError(f"‚ùå Couldn't find {attendance_csv_path}. Please run invoice creation first.")

print(f"üîç Reading CSV files: {invoice_csv_path}, {attendance_csv_path}...")

invoices_df = pd.read_csv(invoice_csv_path)
attendance_df = pd.read_csv(attendance_csv_path)

# Convert attendance dates to datetime
attendance_df["Date"] = pd.to_datetime(attendance_df["Date"], format="%d/%m/%Y", errors="coerce")
attendance_df = attendance_df.dropna(subset=["Date"])

# --- Create merged documents for embedding ---
print("üìÉ Creating documents for vectorstore...")

documents = []

for _, invoice in invoices_df.iterrows():
    invoice_number = invoice['InvoiceNumber']
    attendance_rows = attendance_df[attendance_df["InvoiceNumber"] == invoice_number]
    
    attendance_info = ""
    if not attendance_rows.empty:
        attendance_rows = attendance_rows.sort_values("Date")
        attendance_info = "Attendance Dates:\n" + "\n".join(
            f"- {row['Date'].strftime('%d/%m/%Y')} ({row['Day']})"
            for _, row in attendance_rows.iterrows()
        )
    else:
        attendance_info = "Attendance Dates: None"

    full_text = f"""
Invoice Number: {invoice['InvoiceNumber']}
Service Provider: {invoice['ServiceProviderName']} at {invoice['ServiceProviderAddress']}
Client: {invoice['ClientName']} living at {invoice['ClientAddress']}
Dog Name: {invoice['DogName']}
Month Billed For: {invoice['MonthBilledFor']}
Original Cost Per Day: ${invoice['OriginalCostPerDay']}
Percentage Discount: {invoice['PercentageDiscount']}%
Total Amount Due: ${invoice['TotalAmountDue']}
Number of Attendance Days: {invoice['DatesAttendedCount']}
{attendance_info}
    """.strip()

    documents.append(full_text)

if not documents:
    print("‚ö†Ô∏è No documents created for embedding. Exiting.")
    exit(1)

# --- Split into smaller chunks ---
print("üîπ Splitting documents into text chunks...")
text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
all_texts = text_splitter.split_text("\n\n".join(documents))
print(f"üîπ Created {len(all_texts)} chunks.")

# --- Embedding + Vectorstore ---
print("üî¢ Building embeddings and saving to Chroma...")

embeddings = HuggingFaceEmbeddings(model_name=embedding_model_name)

if os.path.exists(persist_directory):
    import shutil
    shutil.rmtree(persist_directory)

vectorstore = Chroma.from_texts(all_texts, embedding=embeddings, persist_directory=persist_directory)
print("‚úÖ Vectorstore created successfully and saved to 'chroma_db'.")
