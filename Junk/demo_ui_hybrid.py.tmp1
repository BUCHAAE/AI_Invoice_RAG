""" 
Author: Andrew Buchanan  
Date: 26/04/2025  

Purpose:  
This script processes structured CSVs created from daycare invoices and attendance records. 
It builds a semantic vectorstore using sentence-transformer embeddings for retrieval-augmented generation. 
It includes invoice data, attendance facts, and summaries to support precise Q&A via Ollama LLM.
"""

import gradio as gr
import os
import pandas as pd
from datetime import datetime
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA
from langchain_ollama import OllamaLLM
from langchain.prompts import PromptTemplate

# --- Configuration ---
persist_directory = "chroma_db"
invoice_csv = "invoice_summary.csv"
attendance_csv = "attendance_detail.csv"
embedding_model_name = "BAAI/bge-small-en"

# --- Load CSVs ---
if not os.path.exists(invoice_csv) or not os.path.exists(attendance_csv):
    raise FileNotFoundError("‚ùå Required CSV files are missing. Please generate them first.")

print(f"üìÑ Reading {invoice_csv} and {attendance_csv}...")
invoice_df = pd.read_csv(invoice_csv)
attendance_df = pd.read_csv(attendance_csv)

# --- Start compiling content ---
documents = []

# --- Add invoice details ---
for _, row in invoice_df.iterrows():
    documents.append(
        f"Invoice Number: {row['InvoiceNumber']}. "
        f"Month Billed: {row['MonthBilledFor']} {row['Year']}. "
        f"Client: {row['ClientName']}, Address: {row['ClientAddress']}. "
        f"Service Provider: {row['ServiceProviderName']}, Address: {row['ServiceProviderAddress']}. "
        f"Dog Name: {row['DogName']}. "
        f"Cost Per Day: ${row['OriginalCostPerDay']}, Discount: {row['PercentageDiscount']}%. "
        f"Total Due: ${row['TotalAmountDue']}. "
        f"Days Attended: {row['DatesAttendedCount']}."
    )

# --- Add attendance entries ---
attendance_df["ParsedDate"] = pd.to_datetime(attendance_df["Date"], format="%d/%m/%Y", errors="coerce")
for _, row in attendance_df.iterrows():
    documents.append(f"{row['DogName']} attended on {row['Date']} ({row['Day']}) under invoice {row['InvoiceNumber']}.")

# --- Add static facts ---
first_date = attendance_df["ParsedDate"].min()
last_date = attendance_df["ParsedDate"].max()
first_day = first_date.strftime("%A")
last_day = last_date.strftime("%A")
total_attendance = attendance_df["ParsedDate"].notna().sum()
monthly_attendance = attendance_df["ParsedDate"].dt.to_period("M").value_counts().sort_index()
avg_cost_per_day = invoice_df["TotalAmountDue"].sum() / total_attendance if total_attendance else 0
attendance_by_day = attendance_df["Day"].fillna("Unknown").value_counts()
most_common_day = attendance_by_day.idxmax()
gaps = attendance_df["ParsedDate"].sort_values().diff().dt.days
max_gap = int(gaps.max())
unique_months = attendance_df["ParsedDate"].dt.to_period("M").nunique()
attendance_years = sorted(attendance_df["ParsedDate"].dt.year.dropna().unique())
total_cost = invoice_df["TotalAmountDue"].sum()
invoice_count = len(invoice_df)

# Summary block
documents.extend([
    f"Snoopy's first ever attendance at Pawprints and Playcare LLC was on {first_date.strftime('%d %B %Y')}, which was a {first_day}.",
    f"Snoopy's most recent attendance was on {last_date.strftime('%d %B %Y')}, which was a {last_day}.",
    f"Snoopy attended a total of {total_attendance} days.",
    f"Average cost per daycare visit: ${avg_cost_per_day:.2f}.",
    f"Snoopy most frequently attended on {most_common_day}s.",
    f"Longest gap between visits: {max_gap} days.",
    f"Snoopy attended during {unique_months} unique months.",
    f"Snoopy attended doggy daycare in the following years: {', '.join(str(y) for y in attendance_years)}.",
    f"The total cost for all invoices is ${total_cost:.2f}.",
    f"There are {invoice_count} invoices on record for Snoopy's daycare visits."
])
documents.append("Monthly attendance breakdown:")
for month, count in monthly_attendance.items():
    documents.append(f"- {month.strftime('%B %Y')}: {count} attendances")

# Add narrative
documents.insert(0,
    "Snoopy is a cheerful Beagle owned by Charlie Brown. They live together in Bloomington, Minnesota. "
    "Each week, Snoopy attends doggy daycare at Pawprints & Playcare LLC, a local service offering structured care for dogs "
    "including supervised play sessions, rest periods, and social interaction. "
    "The facility is open seven days a week and is located on Willow Creek Drive. "
    "Every month, Pawprints & Playcare invoices Charlie Brown for Snoopy‚Äôs visits, applying a 50% loyalty discount."
)

# --- Chunking ---
print("‚úÇÔ∏è Splitting documents into chunks...")
text_splitter = RecursiveCharacterTextSplitter(chunk_size=100, chunk_overlap=15)
chunks = text_splitter.split_text("".join(documents))

# --- Embedding & Vectorstore ---
print("üî¢ Creating vectorstore...")
if os.path.exists(persist_directory):
    import shutil
    shutil.rmtree(persist_directory)
embedding = HuggingFaceEmbeddings(model_name=embedding_model_name)
vectorstore = Chroma.from_texts(chunks, embedding=embedding, persist_directory=persist_directory)
print("‚úÖ Vectorstore created successfully.")

# --- QA Chain ---
prompt_template = PromptTemplate(
    input_variables=["context", "question"],
    template="You are a helpful assistant answering only based on the context below.\n"
             "Context:{context}\n"
             "Question: Answer as succinctly as possible. {question}\n"
             "Answer:"
)
#llm = OllamaLLM(model="llama3:instruct")
llm = OllamaLLM(model="deepseek-coder:6.7b-instruct")
qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    retriever=vectorstore.as_retriever(),
    chain_type="stuff",
    chain_type_kwargs={"prompt": prompt_template},
    return_source_documents=False,
)

# --- Gradio UI ---
def ask_question(query, succinct):
    if succinct:
        query = "Answer as succinctly as possible. " + query
    response = qa_chain.invoke({"query": query})
    return response['result'].strip()

gr.Interface(
    fn=ask_question,
    inputs=[
        gr.Textbox(lines=2, placeholder="Ask a question about Snoopy's invoices..."),
        gr.Checkbox(label="Make answer succinct", value=True)
    ],
    outputs=gr.Textbox(label="Answer"),
    title="Snoopy Invoice Q&A (LLM + Vectorstore)"
).launch()















